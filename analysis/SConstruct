### ------------------------------------------------------------------
###  SConstruct - Building script for NEXUS
###
###  Author : J. Martin-Albo <jmalbos@ific.uv.es>
###  Created: 23 July 2009
###  Version: $Id: SConstruct 2058 2009-07-28 13:56:40Z jmalbos $
### ------------------------------------------------------------------

import os


### Some useful functions ............................................

def RootLibs():
    return ['Core', 'Cint', 'RIO', 'Net', 'Hist', 'Graf', 'Graf3d', 
            'Gpad', 'Tree', 'Rint', 'Postscript', 'Matrix', 'Physics', 
            'MathCore', 'Thread', 'freetype', 'TMVA']


def Abort(message):
    print "scons: Build aborted."
    print "scons:", message
    Exit(1)


### ..................................................................
### First time this script is executed, a configure-like step tries
### to find out where headers and libraries of all dependencies are
### located. If it succeeds, compilation flags are stored in a file
### and used in following builds until a cleaning is performed.
### 
### The script tries to locate the dependencies using pkg-config 
### scripts or searching at common paths (/usr or /usr/local).
### That should work for most systems. However, if needed, users can
### specify the location of any dependency via command-line or the 
### BUILDVARS_FILE.
###


### Build variables ..................................................
### These vars can be used to specify (via command-line or file) the
### location of dependencies. They are also used to store in file
### configured values of compilation flags ($CPPPATH, $LIBS, etc.)
###

# file where the variables are (will be) stored
BUILDVARS_FILE = 'buildvars.scons'

# dummy default for path-variables
DEFAULT_PATH = '.'

# create Variables instance (associated to file) and add it the vars
vars = Variables(BUILDVARS_FILE)

vars.AddVariables(

    PathVariable('BHEP_INCDIR',                     # var name
                 'Path to BHEP headers directory.', # var description
                 DEFAULT_PATH),                     # var default value

    PathVariable('BHEP_LIBDIR',
                 'Path to BHEP library directory.',
                 DEFAULT_PATH),

    PathVariable('CLHEP_INCDIR',
                 'Path to CLHEP headers directory.',
                 DEFAULT_PATH),

    PathVariable('CLHEP_LIBDIR',
                 'Path to CLHEP library directory.',
                 DEFAULT_PATH),

    PathVariable('ROOT_INCDIR',
                 'Path to ROOT headers directory.',
                 DEFAULT_PATH),

    PathVariable('ROOT_LIBDIR',
                 'Path to ROOT installation',
                 DEFAULT_PATH),

    # The following vars should not be defined by users unless they 
    # know what they are doing.

    ('CPPDEFINES',
     'Preprocessor definitions.',
     []),
    
    ('CCFLAGS',
     'General options passed to the compiler.',
     []),

    ('CPPFLAGS',
     'User-specified preprocessor options.',
     []),
    
    ('CPPPATH',
     'List of directories where the include headers are located.',
     []),

    ('LIBPATH',
     'List of directories where the linked libraries are located.',
     []),

    ('LIBS',
     'List of libraries to link against.',
     []),
    
    ('LINKFLAGS',
     'User options passed to the linker.',
     [])
    )


### Construction environment .........................................

env = Environment(variables=vars, ENV=os.environ)



### Configure build ..................................................

if not env['LIBPATH']:

    # CLHEP ................................................
    
    if env['CLHEP_INCDIR'] != DEFAULT_PATH:
        env.Append(CPPPATH = env['CLHEP_INCDIR'])
    else:
        try:
            env.ParseConfig("clhep-config --include")
        except OSError:
            Abort("CLHEP couldn't be configured.")

    if env['CLHEP_LIBDIR'] != DEFAULT_PATH:
        env.Append(LIBPATH = env['CLHEP_LIBDIR'])
        env.Append(LIBS = "CLHEP")
    else:
        try:
            env.ParseConfig("clhep-config --libs")
        except OSError:
            Abort("CLHEP couldn't be configured.")


    # BHEP .................................................

    if env['BHEP_INCDIR'] != DEFAULT_PATH:
        env.Append(CPPPATH = env['BHEP_INCDIR'])
    else:
        try:
            env.ParseConfig("bhep-config --include")
        except OSError:
            Abort("BHEP couldn't be configured.")

    if env['BHEP_LIBDIR'] != DEFAULT_PATH:
        env.Append(CPPPATH = env['BHEP_LIBDIR'])
        env.Append(LIBS = "bhep")
    else:
        try:
            env.ParseConfig("bhep-config --libs")
        except OSError:
            Abort("BHEP couldn't be configured.")


    # ROOT .................................................

    if env['ROOT_INCDIR'] != DEFAULT_PATH:
        env.Append(CPPPATH = env['ROOT_INCDIR'])
    else:
        try:
            env.ParseConfig("root-config --cflags")
            #env.MergeFlags('-I/Users/jmalbos/Software/root/include')
        except OSError:
            Abort("ROOT couldn't be configured.")

    if env['ROOT_LIBDIR'] != DEFAULT_PATH:
        env.Append(LIBPATH = env['ROOT_LIBDIR'])
        env.Append(LIBS = RootLibs())
    else:
        try:
            env.ParseConfig("root-config --libs")
        except OSError:
            Abort("ROOT couldn't be configured.")


    #conf = Configure(env)
    
    #if not conf.CheckLibWithHeader('CLHEP','CLHEP/ClhepVersion.h','C++','',0):
    #    Abort("CLHEP library or headers not found!")

    #if not conf.CheckLibWithHeader('bhep', 'bhep/system_of_units.h', 'C++'):
    #    Abort("BHEP library or headers not found!")
    
    #if not conf.CheckLib('Cint', '', '', 'C++'):
    #    Abort("ROOT")

    #env = conf.Finish()


# save build variables to file
vars.Save(BUILDVARS_FILE, env)

# generate help text for build vars
Help(vars.GenerateHelpText(env))


### MindG4 source code ................................................

# add headers location to CPPPATH
env['CPPPATH'] += ['#include']

# create library and add it to LIBPATH and LIBS
src = Glob('#src/*.cpp')
lib = env.Library('Golden_Analysis', src)

env['LIBPATH'] += ['#']
env['LIBS'] += lib

# build application
run_multitrack = env.Program('run_multitrack', 'run_multitrack.cpp')

# remove also BUILDVARS file when cleaning
Clean(run_multitrack, BUILDVARS_FILE)
