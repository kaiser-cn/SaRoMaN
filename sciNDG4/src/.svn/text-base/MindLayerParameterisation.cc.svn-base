// -----------------------------------------------------------------------------
//  $Id$
//
//  Author : J. Martin-Albo <jmalbos@ific.uv.es>
//  Created: 24 August 2009
//  
//  Copyright (c) 2009 -- IFIC Neutrino Group
// -----------------------------------------------------------------------------

#include "MindLayerParameterisation.h"
#include "MindConfigService.h"
#include "MindParamStore.h"
#include "MindSD.h"

#include <G4VPhysicalVolume.hh>
#include <G4Box.hh>
#include <G4Material.hh>
#include <G4LogicalVolume.hh>
#include <G4VisAttributes.hh>
#include <G4SDManager.hh>
#include <Randomize.hh>


MindLayerParameterisation::MindLayerParameterisation()
{
  Initialize();
}



void MindLayerParameterisation::Initialize()
{
  // retrieve input parameters
  const MindParamStore& cfg = MindConfigService::Instance().Geometry();
  
  // detector dimensions
  _detector_width  = cfg.GetDParam("width");
  _detector_height = cfg.GetDParam("height");
  _detector_length = cfg.GetDParam("length");
  
  // layers thicknesses 
  _active_thickness  = cfg.GetDParam("active_thickness");
  _passive_thickness = cfg.GetDParam("passive_thickness");
  
  // materials
  _active_mat  = cfg.GetSParam("active_material");
  _passive_mat = cfg.GetSParam("passive_material");

  // no. of active layers
  _num_active = cfg.GetIParam("number_active_layers");
  
  // gaps between layers
  _gap = cfg.GetVParam("gaps");

  // check that number of gaps and active layers are consistent
  // with each other
  if (_gap.size() != (_num_active + 1))
    G4Exception("LayerParameterisation::Initialize",
		"Layers_S001", RunMustBeAborted,
		"ERROR.- Inconsistent number of gaps and active layers!");

  // calculate length of a block (i.e., 1 passive layer and n active layers)
  _block_length = _passive_thickness + _num_active * _active_thickness;
  for (G4int i=0; i<=_num_active; i++)
    _block_length += _gap[i];

  // number of layers per block (this is redundant, but makes code clearer)
  _layers_per_block = _num_active + 1;

  // number of blocks and layers that fit in the detector length
  _num_blocks = G4int(_detector_length / _block_length);
  _detector_length = _num_blocks * _block_length;
  _num_layers = _num_blocks * _layers_per_block;
  
  // initializing sensitive detector
  G4SDManager* SDMgr = G4SDManager::GetSDMpointer();
  G4String SD_name = "/mind/ACTIVE";
  _MSD = new MindSD(SD_name);
  SDMgr->AddNewDetector(_MSD);

  // calculate passive target probability
  _passive_target_prob = PassiveTargetProb();
}



G4Material* MindLayerParameterisation::ComputeMaterial
(const G4int layer_no, G4VPhysicalVolume* currentVol, const G4VTouchable*)
{
  G4Material* layer_mat;

  if (IsPassive(layer_no)) {
    layer_mat = G4Material::GetMaterial(_passive_mat);
    
    currentVol->SetName("PASSIVE");

    // G4VisAttributes red(G4Colour(1., 0., 0.));
//     currentVol->GetLogicalVolume()->SetVisAttributes(red);
  }
  else {
    layer_mat = G4Material::GetMaterial(_active_mat);
    
    currentVol->SetName("ACTIVE");

    currentVol->GetLogicalVolume()->SetSensitiveDetector(_MSD);
    
    // G4VisAttributes blue(G4Colour(0., 0., 1.));
//     currentVol->GetLogicalVolume()->SetVisAttributes(blue);
  }
  
  return layer_mat;
}



void MindLayerParameterisation::ComputeDimensions
(G4Box& layer, const G4int layer_no, const G4VPhysicalVolume*) const
{
  layer.SetXHalfLength(_detector_width/2.);
  layer.SetYHalfLength(_detector_height/2.);

  if (IsPassive(layer_no))
    layer.SetZHalfLength(_passive_thickness/2.);
  else
    layer.SetZHalfLength(_active_thickness/2.);
}



void MindLayerParameterisation::ComputeTransformation
(const G4int layer_no, G4VPhysicalVolume* physVol) const
{
  G4ThreeVector origin = G4ThreeVector(0,0,LocateLayer(layer_no));
  physVol->SetTranslation(origin);
  physVol->SetRotation(0);
}



G4double MindLayerParameterisation::LocateLayer(const G4int layer_no) const
{
  G4double zpos;
  
  if (IsPassive(layer_no)) {
    G4int block_no = layer_no / _layers_per_block;
    zpos = block_no * _block_length + _passive_thickness / 2.;
  }
  
  else {
    
    zpos = 0;
    
    for (G4int i=1; i<=_num_active; i++) {
      
      zpos += _gap[i-1] + _active_thickness;
      
      if ((layer_no - i) % _layers_per_block == 0) {
	G4int block_no = (layer_no - i) / _layers_per_block;
	zpos += _block_length * block_no + 
	  _passive_thickness - _active_thickness / 2.;
	break;
      }
    }
      
  }
  
  zpos = zpos - _detector_length / 2.;
  
  return zpos;
}



G4bool MindLayerParameterisation::IsPassive(G4int layer_no) const
{
  return ((layer_no % _layers_per_block == 0) ? true : false);
}



G4int MindLayerParameterisation::SelectRandomLayer(const G4String& type) const
{
  // A block is selected randomly [0, _num_blocks-1]
  G4int block_no = G4int( G4UniformRand() * _num_blocks );
  
  if (type == "PASSIVE") {
    return (block_no * _layers_per_block);
  }
  else if (type == "ACTIVE") {
    // An active layer is selected randomly [0, _num_active - 1]
    G4int active_no = G4int( G4UniformRand() * _num_active);
    return (block_no * _layers_per_block + (active_no+1));
  }
  else {
    G4Exception("LayerParameterisation::SelectRandomLayer",
		"Layers_S001", RunMustBeAborted,
		"ERROR.- Unknown layer type!");
  }
}



G4ThreeVector MindLayerParameterisation::GenerateVertexInLayer
(const G4int layer_no) const
{
  // generate point in layer's system of reference
  G4double width  = _detector_width;
  G4double height = _detector_height;
  G4double thickn;
  
  if (IsPassive(layer_no))
    thickn = _passive_thickness;
  else
    thickn = _active_thickness;
  
  G4ThreeVector xyz = RandomPointInBox(width, height, thickn);
  
  // transformation to global system of reference
  // (displacement only in Z-axis)
  G4double zpos = xyz.z() + LocateLayer(layer_no);
  
  xyz.setZ(zpos);

  return xyz;
}



G4ThreeVector MindLayerParameterisation::RandomPointInBox
(G4double width, G4double height, G4double length) const
{
  G4double x, y, z;
  x = (G4UniformRand() * width)  - width/2.;
  y = (G4UniformRand() * height) - height/2.;
  z = (G4UniformRand() * length) - length/2.;
  return G4ThreeVector(x, y, z);
}



G4double MindLayerParameterisation::PassiveTargetProb()
{
  G4int pass_A, act_A;  // number of nucleons (atomic number)
  G4double pass_M, act_M;  // molar mass
  G4double pass_dens, act_dens;  // density
  G4double pass_th = _passive_thickness;
  G4double act_th  = _num_active * _active_thickness;
  
  // FIXME. Some material properties can be fetched from G4Material
  act_A = 104;
  act_M = 104.149 * g/mole;
  act_dens = 1.06 * g/cm3;
  
  pass_A = 56;
  pass_M = 55.845 * g/mole;
  pass_dens = 7.874 * g/cm3;
  
  G4double prob = (pass_A * pass_dens * pass_th * act_M) /
    (pass_A * pass_dens * pass_th * act_M + act_A * act_dens * act_th * pass_M);

  return prob;
}






