// ----------------------------------------------------------------------------
//  $Id$
//
//  Author : J Martin-Albo <jmalbos@ific.uv.es>
//  Created: 3 Jun 2009
//
//  Copyright (c) 2009 -- IFIC Neutrino Group 
// ----------------------------------------------------------------------------

#include "MindTrackingAction.h"
#include "MindUtils.h"
#include "MindConfigService.h"
#include "MindParamStore.h"
#include "MindLookupTable.h"
#include "MindSteppingAction.h"

#include <G4Track.hh>
#include <G4TrackStatus.hh>
#include <G4RunManager.hh>

#include <bhep/bhep_svc.h>

//using namespace bhep;

/// Create particle in bhep transient event and set basic properties
///
void MindTrackingAction::PreUserTrackingAction(const G4Track* track)
{
  //Reset the bit which protects against infinite loops at borders.
  MindSteppingAction* mindStep = (MindSteppingAction*)
    G4RunManager::GetRunManager()->GetUserSteppingAction();
  mindStep->reset_stepCheck();

  // create new bhep particle
  G4String particle_name = track->GetDefinition()->GetParticleName();
  
  // set family relations
  G4int track_id  = track->GetTrackID();
  G4int parent_id = track->GetParentID();
  
  if (parent_id == 0) {   // particle is primary (no parent)
    bhep::particle* bparticle = new bhep::particle(bhep::TRUTH, particle_name);
    bparticle->set_primary(true);
    bparticle->add_property("CreatorProcess", "none");
    bparticle->add_property("G4TrackID", bhep::to_string(track_id));
    
    //Mark if is primary lepton from interaction.
    if ( MindLookupTable::Instance().check_primLep() ){
      G4int primPDG = MindLookupTable::Instance().get_primLepPDG();
      G4ThreeVector primMom = MindLookupTable::Instance().get_pLMom();
      if ( track->GetDefinition()->GetPDGEncoding() == primPDG &&
	   track->GetDynamicParticle()->GetPrimaryParticle()->GetMomentum() == primMom ){
	_primLep = track_id;
	bparticle->add_property("PrimaryLepton", "true");
      }

    }
    else if (MindConfigService::Instance().Generation().GetSParam("generator") == "SINGLE_PARTICLE")
      _primLep = track_id;//allows single particle generator events.
    
    MindLookupTable::Instance().add_primary( track_id );

    bhep::event& bevt = bhep::bhep_svc::instance()->get_event();
    bevt.add_true_particle(bparticle);
  }
  else {  // particle is secondary

    G4String creatorProc = track->GetCreatorProcess()->GetProcessName();
    G4String procType = track->GetCreatorProcess()->
      GetProcessTypeName( track->GetCreatorProcess()->GetProcessType() );

    bool decay = false, primHad = false;
    if ( procType == "Hadronic" && MindLookupTable::Instance().check_primary( parent_id ) )
      primHad = true;
    if ( creatorProc == "Decay" && MindLookupTable::Instance().find_particle( parent_id ) == 0 )
      decay = true;
    
    if ( decay || primHad ){
      
      bhep::particle* bparticle = new bhep::particle(bhep::TRUTH, particle_name);
      bparticle->set_primary(false);
      
      bhep::particle* bparent = MindUtils::GetBParticle(parent_id);
      bparticle->set_mother(*bparent);
      bparent->add_daughter(*bparticle);
      
      bparticle->add_property("CreatorProcess", creatorProc);
      bparticle->add_property("G4TrackID", bhep::to_string(track_id));

      bhep::event& bevt = bhep::bhep_svc::instance()->get_event();
      bevt.add_true_particle(bparticle);
    } else {
      
      if ( parent_id == _primLep )
	MindLookupTable::Instance().add_particle( 1, track_id );

      else if ( MindLookupTable::Instance().find_particle( parent_id ) != 0 ){
	G4int parent_shower = MindLookupTable::Instance().find_particle( parent_id );
	MindLookupTable::Instance().add_particle( parent_shower, track_id );
      }

      else 
	MindLookupTable::Instance().add_particle( 2, track_id);

    }

  }
  
}



void MindTrackingAction::PostUserTrackingAction(const G4Track* track)
{
  
  G4int track_id = track->GetTrackID();
  
  G4double kin_energy = track->GetVertexKineticEnergy();
  // If there is a bhep particle for this particle finalise data.
  if ( MindLookupTable::Instance().find_particle( track_id ) == 0 ){
    
    bhep::particle* bparticle = MindUtils::GetBParticle(track_id);
  
    // kinematics at production vertex ................................
    
    // vertex position
    G4ThreeVector pos = track->GetVertexPosition();
    bparticle->set_vertex(pos.x(), pos.y(), pos.z());
    
    // initial momentum
    G4double mass       = track->GetDefinition()->GetPDGMass();
    G4double p_mod      = sqrt(sqr(mass + kin_energy) - sqr(mass));
    
    G4ThreeVector p_direction = track->GetVertexMomentumDirection();
  
    G4ThreeVector momentum = p_mod * p_direction;
    
    bparticle->set_p(momentum.x(),momentum.y(),momentum.z());
    
    
    // kinematics at decay vertex .....................................
    
    // decay position
    pos = track->GetPosition();
    bparticle->set_decay_vertex(pos.x(), pos.y(), pos.z());
    
    // momentum
    momentum = track->GetMomentum();
    
    bparticle->set_decay_p(momentum.x(),momentum.y(),momentum.z());
    
    G4double track_length = track->GetTrackLength();
    bparticle->add_property("length", track_length);

  }
  
}
