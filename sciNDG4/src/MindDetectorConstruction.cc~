// ----------------------------------------------------------------------------
//  $Id: MindDetectorConstruction.cc 543 2014-11-01 23:03:10Z  $
//
//  Author : J Martin-Albo <jmalbos@ific.uv.es>
//  Created: 14 Jun 2008
//
//  Copyright (c) 2008, 2009 -- IFIC Neutrino Group
// ----------------------------------------------------------------------------

#include "MindDetectorConstruction.h"
#include "MindDetectorGeometry.h"
#include "MindMaterialsList.h"
#include "MindConfigService.h"
#include "MindParamStore.h"
#include "MindSD.h"

#include <G4Box.hh>
#include <G4LogicalVolume.hh>
#include <G4PVPlacement.hh>
#include <G4Material.hh>
#include <G4VisAttributes.hh>
#include <G4GDMLParser.hh>

//ROOT
/*
#include "TROOT.h"
#include "TFile.h"
#include "TSystem.h"
#include "Cintex/Cintex.h"

#include "MindGeoTree.h"
*/
#include "bhep/bhep_svc.h"

MindDetectorConstruction::MindDetectorConstruction():
  _detector(0)
{
  const MindParamStore& config = 
    MindConfigService::Instance().Geometry();
  _use_gdml = config.PeekIParam("useGDML") ? 
    ( config.GetIParam("useGDML")==0 ? false : true ) : false;
  _write_gdml = config.PeekIParam("writeGDML") ?
    ( config.GetIParam("writeGDML")==0 ? false : true ) : false;
  _gdml_file_name = config.PeekSParam("GDMLFileName") ? 
    config.GetSParam("GDMLFileName") : "";
}



MindDetectorConstruction::~MindDetectorConstruction()
{
  delete _detector;
}



G4VPhysicalVolume* MindDetectorConstruction::Construct()
{
  G4PVPlacement* world_physi;
  G4GDMLParser * gdm = new G4GDMLParser();
  if( _write_gdml || !_use_gdml ){

    MindMaterialsList::DefineMaterials();
    
    
    // WORLD volumes definition .......................................
    // The WORLD is an empty (vacuum-filled) cube of 100m side.
    
    G4double size = 200.*m;
    G4Box* world_solid = new G4Box("WORLD", size/2., size/2., size/2.);
    
    G4LogicalVolume* world_logic = 
      new G4LogicalVolume(world_solid, G4Material::GetMaterial("G4_Galactic"),
			  "WORLD", 0, 0, 0, true);
    
    world_physi = 
      new G4PVPlacement(0, G4ThreeVector(), world_logic, "WORLD", 0, false, 0);
    
    world_logic->SetVisAttributes(G4VisAttributes::Invisible);
    
    
    // DETECTOR volumes definition ....................................
    _detector = new MindDetectorGeometry();
    
    
    G4LogicalVolume* detector_logic = _detector->GetLogicalVolume();
    
    
    // //SetMinimum Kinetic energy for tracking.
    //   G4double minKin = 100 * MeV;
    //   detector_logic->SetUserLimits(new G4UserLimits(DBL_MAX,DBL_MAX,DBL_MAX, minKin));
    
    G4PVPlacement* detector_physi = 
      new G4PVPlacement(0, G4ThreeVector(0,0,0), detector_logic, "DETECTOR", 
			world_logic, false, 0);
    
    // initiallize ROOT
    /****
	 TSystem ts;
	 
	 gSystem->Load("libMindClassesDict");
	 ROOT::Cintex::Cintex::Enable();
	 
	 const G4ElementTable* eltab = G4Element::GetElementTable();
	 const G4MaterialTable* mattab = G4Material::getMaterialTable();
	 
	 MindGeoTree* geotree = new MindGeoTree(world_physi, eltab, mattab);
	 
	 TFile* fo = new TFile("MindGeo.root","RECREATE");
	 
	 fo.WriteObject(geotree, "my_geo");
    ****/
    if ( _write_gdml ) gdm->Write(_gdml_file_name , world_physi);
  }
  else if( _use_gdml ){
    gdm->Read(_gdml_file_name);
    world_physi = dynamic_cast<G4PVPlacement*>(gdm->GetWorldVolume());
  }
  return world_physi;
}
/*
void MindDetectorConstruction::ConstructSDanField(){

  G4String SD_name = "/mind/ACTIVE/";
  MindSD* SD = new MindSD(SD_name);
  SetSensitiveDetector("ACTIVE", detector_logic);

}
*/

